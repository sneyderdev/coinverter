---
import { ArrowRightLeft } from "lucide-react";

import { GET } from "@/pages/api/currencies";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Skeleton } from "@/components/ui/skeleton";
import { CurrencySelect } from "./CurrencySelect";
import ErrorMessage from "./ErrorMessage.astro";

import type { Converter, Currencies, BadRequest } from "@/types/app";

const defaultRatesResponse = await fetch(
  new URL("/api/latest?symbol=COP", Astro.url)
);
const defaultRates = (await defaultRatesResponse.json()) as
  | Converter
  | BadRequest;

const currenciesResponse = await GET(Astro);
const currencies = (await currenciesResponse.json()) as Currencies | BadRequest;
---

<Card>
  <CardHeader>
    <CardTitle>Converter</CardTitle>
    {
      !("error" in defaultRates) && (
        <CardDescription>Convert between currencies.</CardDescription>
      )
    }
  </CardHeader>
  <CardContent id="converter" data-data={JSON.stringify(defaultRates)}>
    {
      "error" in defaultRates ? (
        <ErrorMessage>{defaultRates.error}</ErrorMessage>
      ) : (
        <div class="grid gap-y-4">
          <div class="grid w-full items-center gap-1.5">
            <Label htmlFor="from">From</Label>
            <div class="flex flex-col gap-2 xs:flex-row">
              <Input type="number" id="from" min="0" />
              {"error" in currencies ? (
                <ErrorMessage>{currencies.error}</ErrorMessage>
              ) : (
                <CurrencySelect
                  id="base"
                  currencies={currencies}
                  client:only="react"
                />
              )}
            </div>
          </div>
          <div class="grid w-full items-center gap-1.5">
            <Label htmlFor="to">To</Label>
            <div class="flex flex-col gap-2 xs:flex-row">
              <Input type="number" id="to" min="0" />
              {"error" in currencies ? (
                <ErrorMessage>{currencies.error}</ErrorMessage>
              ) : (
                <CurrencySelect
                  id="symbol"
                  currencies={currencies}
                  client:only="react"
                />
              )}
            </div>
          </div>
        </div>
      )
    }
  </CardContent>
  {
    !("error" in defaultRates) && (
      <CardFooter className="gap-x-1 text-xs text-muted-foreground">
        <ArrowRightLeft size={16} />
        <span id="exchange_rate" />
        <Skeleton id="exchange_rate_loader" className="hidden h-4 w-40" />
      </CardFooter>
    )
  }
</Card>

<script src="../scripts/converter.ts"></script>
